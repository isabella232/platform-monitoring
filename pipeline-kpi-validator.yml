---
env_params: &env_params
  APPS_DOMAIN: {{kpi-validator-apps-domain}}
  BOSH_CLIENT: {{kpi-validator-bosh-username}}
  BOSH_CLIENT_SECRET: {{kpi-validator-bosh-password}}
  BOSH_ENVIRONMENT: {{kpi-validator-bosh-url}}
  BOSH_PASSWORD: {{kpi-validator-bosh-password}}
  BOSH_URL: {{kpi-validator-bosh-url}}
  BOSH_USER: {{kpi-validator-bosh-username}}
  CF_PASSWORD: {{kpi-validator-cf-password}}
  CF_USERNAME: {{kpi-validator-cf-username}}
  RUN_TIME_MINUTES: {{kpi-validator-run-time-minutes}}
  SYS_DOMAIN: {{kpi-validator-sys-domain}}

resources:
- name: platform-monitoring
  type: git
  source:
    uri: git@github.com:pivotal-cf/platform-monitoring
    branch: master
    private_key: {{metrix-git-key}}
- name: deployments-metrics
  type: git
  source:
    uri: git@github.com:pivotal-cf/deployments-metrics
    branch: master
    private_key: {{metrix-git-key}}
- name: loggregator
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator
    branch: master
    private_key: {{metrix-git-key}}
    tag_filter: v77
- name: slack-alert
  type: slack-notification
  source:
    url: https://hooks.slack.com/services/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
- name: every-weekday-morning
  type: time
  source:
    days: [Monday, Tuesday, Wednesday, Thursday, Friday]
    start: 02:00 AM
    stop: 03:00 AM
    location: America/Boise
- name: cf-deployment
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-deployment
    branch: master
    private_key: {{metrix-git-key}}
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest
jobs:
- name: cf-deployment
  build_logs_to_retain: 25
  serial_groups: [kpi]
  plan:
  - get: cf-deployment
  - get: deployments-metrics
  - get: every-weekday-morning
    trigger: true
  - task: deploy
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfmetrics/platform_ops
          tag: latest

      inputs:
      - name: cf-deployment
      - name: deployments-metrics

      outputs:
      - name: results
        path: ""

      params:
        <<: *env_params

      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -ex

            unset BOSH_USER

            cd cf-deployment
            export BOSH_CA_CERT=`cat ../deployments-metrics/bosh-deployments/gcp/healthwatch/bosh2_director_ca_cert.pem`

            bosh -n log-in
            #bosh -n -d cf delete-deployment

            bosh -n -d cf deploy --vars-store=../deployments-metrics/bosh-deployments/gcp/healthwatch/cf-deployment-vars.yml \
            -v system_domain=cf.healthwatch.gcp.pcf-metrics.com  cf-deployment.yml \
            -o ../deployments-metrics/bosh-deployments/gcp/healthwatch/enable_platform_monitoring_group.yml \
            -o ../deployments-metrics/bosh-deployments/gcp/healthwatch/enable_app_metrics_processing.yml \
            -o ../deployments-metrics/bosh-deployments/gcp/healthwatch/enable_3_diego_cells.yml \
            -o ../deployments-metrics/bosh-deployments/gcp/healthwatch/enable_3_gorouters.yml

            bosh -n -d healthwatch-app-dev-v1-1 run-errand push-apps
            bosh -n clean-up --all
    on_failure:
      put: slack-alert
      params:
        text: "cf-deployment failed "
        username: KPI Bot
    on_success:
      put: slack-alert
      params:
        text: "cf-deployment succeeded! "
        username: KPI Bot
- name: run-tests
  build_logs_to_retain: 25
  plan:
  - get: platform-monitoring
    trigger: true
  - get: every-weekday-morning
    trigger: true
    passed: [cf-deployment]
  - task: compare-kpis
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfmetrics/platform_ops
          tag: latest

      inputs:
      - name: platform-monitoring

      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -ex

            cd platform-monitoring
            gradle clean
            gradle test
- name: validate-kpis
  build_logs_to_retain: 25
  serial_groups: [kpi]
  plan:
  - get: platform-monitoring
    trigger: true
    passed: [run-tests]
  - get: loggregator
  - get: deployments-metrics
  - get: every-weekday-morning
    trigger: true
    passed: [run-tests]
  - task: compare-kpis
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfmetrics/platform_ops
          tag: latest

      inputs:
      - name: platform-monitoring
      - name: loggregator
      - name: deployments-metrics

      outputs:
      - name: results
        path: ""

      params:
        <<: *env_params

      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -ex
            FAIL=0
             pushd platform-monitoring
               set +e
               gradle clean
               gradle jar -DskipTests=true
               ./runValidator.sh &
               PID=$!
               echo $PID
             popd
            sleep 30s
            cf login -a "api.$SYS_DOMAIN" -u $CF_USERNAME -p $CF_PASSWORD -o system -s system --skip-ssl-validation
            cf create-space platform_monitoring || true
            cf target -s platform_monitoring

            cf push 500-error -p platform-monitoring/assets/500-error.jar
            cf push bad-gateway -p platform-monitoring/assets/bad-gateway.jar -u none

            siege -t 3s http://500-error.$APPS_DOMAIN/greeting
            siege -t 3s http://bad-gateway.$APPS_DOMAIN

            cf delete-orphaned-routes -f

            wait $PID || let "FAIL+=1"
            mv platform-monitoring/missing_kpis results
            mv platform-monitoring/mismatched_times results

            # BOSH DEPLOYMENT COMMANDS, NOT OM
            bosh clean-up --all
            bosh releases > results/cf_version


            cf delete 500-error -r -f
            cf delete bad-gateway -r -f
            exit $FAIL

    on_failure:
      put: slack-alert
      params:
        text: "The KPI Validator pipeline failed! \n $( cat results/missing_kpis ) \n $( cat results/mismatched_times ) \n Release Versions: \n $( cat results/cf_version ) "
        username: KPI Bot
    on_success:
      put: slack-alert
      params:
        text: "The KPI Validator pipeline succeeded! "
        username: KPI Bot
